<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stay Hungry Stay Foolish</title>
  
  
  <link href="https://tony2ty.github.io/atom.xml" rel="self"/>
  
  <link href="https://tony2ty.github.io/"/>
  <updated>2021-10-21T13:46:46.049Z</updated>
  <id>https://tony2ty.github.io/</id>
  
  <author>
    <name>理性乐观π</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>imx6ull移植mosquitto错误解决</title>
    <link href="https://tony2ty.github.io/2021/10/21/imx6ull%E7%A7%BB%E6%A4%8Dmosquitto%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
    <id>https://tony2ty.github.io/2021/10/21/imx6ull%E7%A7%BB%E6%A4%8Dmosquitto%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</id>
    <published>2021-10-21T13:44:39.000Z</published>
    <updated>2021-10-21T13:46:46.049Z</updated>
    
    <content type="html"><![CDATA[<p>错误提示</p><blockquote><p>relocation R_ARM_THM_MOVW_ABS_NC against `a local symbol’ can not be used when making a shared object; recompile with -fPIC</p></blockquote><p>通过网络搜索确认是编译的openssl库文件存在问题，即增加<code>-fPIC</code>选项重新编译即可通过。</p><p><img src="/2021/10/21/imx6ull%E7%A7%BB%E6%A4%8Dmosquitto%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/image-20211021214009259.png" alt="image-20211021214009259"></p><p>CFLAG标志增加<code>-fPIC</code>选项</p>]]></content>
    
    
    <summary type="html">imx6ull移植mosquitto错误解决</summary>
    
    
    
    <category term="嵌入式Linux" scheme="https://tony2ty.github.io/categories/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux/"/>
    
    
    <category term="IMX6ULL" scheme="https://tony2ty.github.io/tags/IMX6ULL/"/>
    
  </entry>
  
  <entry>
    <title>STM32G070接收北斗数据异常问题</title>
    <link href="https://tony2ty.github.io/2021/10/13/STM32G070%E6%8E%A5%E6%94%B6%E5%8C%97%E6%96%97%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    <id>https://tony2ty.github.io/2021/10/13/STM32G070%E6%8E%A5%E6%94%B6%E5%8C%97%E6%96%97%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/</id>
    <published>2021-10-13T06:32:45.000Z</published>
    <updated>2021-10-13T07:12:12.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>STM32G070接收华大北斗模块报文，数据有丢失。</p><h2 id="硬件环境"><a href="#硬件环境" class="headerlink" title="硬件环境"></a>硬件环境</h2><p>STM32G070</p><p>华大北斗模块</p><p>华大北斗模块使用STM32G070的USART3接口</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p>USART3接口配置</p><p>使用DMA配合USART3的IDLE中断实现。</p><p>串口报文</p><p><img src="/2021/10/13/STM32G070%E6%8E%A5%E6%94%B6%E5%8C%97%E6%96%97%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/image-20211013143735785.png" alt="image-20211013143735785"></p><p>完整北斗报文（定位成功）大概在1089字节左右。</p><h2 id="实际波形"><a href="#实际波形" class="headerlink" title="实际波形"></a>实际波形</h2><p>使用逻辑分析仪测试波形如下。上面的波形是北斗模块数据，下图是USART3 IDLE中断服务程序内GPIO翻转波形（进入IDLE中断后GPIO引脚电平翻转一次）。正常情况下应该是下图中左边部分，即在收到整包北斗数据后USART3产生IDLE中断。</p><p><img src="/2021/10/13/STM32G070%E6%8E%A5%E6%94%B6%E5%8C%97%E6%96%97%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/image-20211013144835061.png" alt="image-20211013144835061"></p><p>上图中右边部分是北斗模块没有将数据一次发送，导致USART3在接收数据过程中产生了IDLE中断。</p><h3 id="分析解决"><a href="#分析解决" class="headerlink" title="分析解决"></a>分析解决</h3><p>波形放大后发现，USART3接收北斗数据报文过程中产生IDLE中断时，报文两个字节之间相差100us左右。即IDLE中断服务程序执行时间超过100us（需要在中断服务程序中禁止DMA传输，然后将数据入队处理），这个明显不合理。</p><p><img src="/2021/10/13/STM32G070%E6%8E%A5%E6%94%B6%E5%8C%97%E6%96%97%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/image-20211013145759434.png" alt="image-20211013145759434"></p><p>检查USART3的IDLE中断服务程序发现内部存在memset函数（内存操作类函数比较耗时）。注释该函数之后，测试丢数据现象好转，但还是存在丢数据的问题，最后提高系统主频至64M（原来只有16M），经测试接收正常。</p><p>该memset操作实际为多于操作，注释改行代码对程序无影响。</p><p><img src="/2021/10/13/STM32G070%E6%8E%A5%E6%94%B6%E5%8C%97%E6%96%97%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/image-20211013150414941.png" alt="image-20211013150414941"></p><p><img src="/2021/10/13/STM32G070%E6%8E%A5%E6%94%B6%E5%8C%97%E6%96%97%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/image-20211013150906617.png" alt="image-20211013150906617"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在中断服务程序中不要加入耗时操作（针对内存的操作）。</p>]]></content>
    
    
    <summary type="html">STM32G070接收北斗数据异常问题</summary>
    
    
    
    <category term="STM32" scheme="https://tony2ty.github.io/categories/STM32/"/>
    
    
    <category term="GPS" scheme="https://tony2ty.github.io/tags/GPS/"/>
    
  </entry>
  
  <entry>
    <title>3的幂</title>
    <link href="https://tony2ty.github.io/2021/09/24/3%E7%9A%84%E5%B9%82/"/>
    <id>https://tony2ty.github.io/2021/09/24/3%E7%9A%84%E5%B9%82/</id>
    <published>2021-09-24T00:33:38.000Z</published>
    <updated>2021-09-24T00:35:50.213Z</updated>
    
    <content type="html"><![CDATA[<h4 id="326-3的幂"><a href="#326-3的幂" class="headerlink" title="326. 3的幂"></a><a href="https://leetcode-cn.com/problems/power-of-three/">326. 3的幂</a></h4><p>难度：简单</p><hr><p>给定一个整数，写一个函数来判断它是否是 3 的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>整数 <code>n</code> 是 3 的幂次方需满足：存在整数 <code>x</code> 使得 <code>n == 3x</code></p><p><strong>示例 1：</strong></p><pre><code>输入：n = 27输出：true</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：n = 0输出：false</code></pre><p><strong>示例 3：</strong></p><pre><code>输入：n = 9输出：true</code></pre><p><strong>示例 4：</strong></p><pre><code>输入：n = 45输出：false</code></pre><p><strong>提示：</strong></p><ul><li><code>-231 &lt;= n &lt;= 231 - 1</code></li></ul><p><strong>进阶：</strong></p><ul><li>你能不使用循环或者递归来完成本题吗？</li></ul><p>通过次数132,712</p><p>提交次数263,322</p><p><strong>性能分析</strong></p><p>时间复杂度：$O(n)$​​​​</p><p>空间复杂度：$O(1)$</p><pre class=" language-c"><code class="language-c">bool <span class="token function">isPowerOfThree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        a <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>                n <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span>  <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/24/3%E7%9A%84%E5%B9%82/image-20210924083435094.png" alt="image-20210924083435094"></p>]]></content>
    
    
    <summary type="html">3的幂</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://tony2ty.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://tony2ty.github.io/categories/leetcode/"/>
    
    
    <category term="数组" scheme="https://tony2ty.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>颠倒二进制位</title>
    <link href="https://tony2ty.github.io/2021/09/22/%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/"/>
    <id>https://tony2ty.github.io/2021/09/22/%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/</id>
    <published>2021-09-22T05:26:19.000Z</published>
    <updated>2021-09-22T05:28:21.141Z</updated>
    
    <content type="html"><![CDATA[<h4 id="190-颠倒二进制位"><a href="#190-颠倒二进制位" class="headerlink" title="190. 颠倒二进制位"></a><a href="https://leetcode-cn.com/problems/reverse-bits/">190. 颠倒二进制位</a></h4><p>难度：简单</p><hr><p>颠倒给定的 32 位无符号整数的二进制位。</p><p><strong>提示：</strong></p><ul><li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li><li>在 Java 中，编译器使用<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81/5295284">二进制补码</a>记法来表示有符号整数。因此，在 <strong>示例 2</strong> 中，输入表示有符号整数 <code>-3</code>，输出表示有符号整数 <code>-1073741825</code>。</li></ul><p><strong>进阶</strong>:<br>如果多次调用这个函数，你将如何优化你的算法？</p><p><strong>示例 1：</strong></p><pre><code>输入：n = 00000010100101000001111010011100输出：964176192 (00111001011110000010100101000000)解释：输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，     因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：n = 11111111111111111111111111111101输出：3221225471 (10111111111111111111111111111111)解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，     因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。</code></pre><p><strong>提示：</strong></p><ul><li>输入是一个长度为 <code>32</code> 的二进制字符串</li></ul><p>通过次数130,497</p><p>提交次数187,149</p><p><strong>性能分析</strong></p><p>时间复杂度：$O(n)$​​​​</p><p>空间复杂度：$O(1)$</p><pre class=" language-c"><code class="language-c">uint32_t <span class="token function">reverseBits</span><span class="token punctuation">(</span>uint32_t n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        uint32_t val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">>></span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            val <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// printf("%d %x\n", (n >> i) &amp; 0x01, val);</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">31</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            val <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/22/%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/image-20210922132720711.png" alt="image-20210922132720711"></p>]]></content>
    
    
    <summary type="html">颠倒二进制位</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://tony2ty.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://tony2ty.github.io/categories/leetcode/"/>
    
    
    <category term="数组" scheme="https://tony2ty.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>位1的个数</title>
    <link href="https://tony2ty.github.io/2021/09/22/%E4%BD%8D1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>https://tony2ty.github.io/2021/09/22/%E4%BD%8D1%E7%9A%84%E4%B8%AA%E6%95%B0/</id>
    <published>2021-09-22T00:44:20.000Z</published>
    <updated>2021-09-22T00:45:57.125Z</updated>
    
    <content type="html"><![CDATA[<h4 id="191-位1的个数"><a href="#191-位1的个数" class="headerlink" title="191. 位1的个数"></a><a href="https://leetcode-cn.com/problems/number-of-1-bits/">191. 位1的个数</a></h4><p>难度：简单</p><hr><p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为<a href="https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F">汉明重量</a>）。</p><p><strong>提示：</strong></p><ul><li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li><li>在 Java 中，编译器使用<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81/5295284">二进制补码</a>记法来表示有符号整数。因此，在上面的 <strong>示例 3</strong> 中，输入表示有符号整数 <code>-3</code>。</li></ul><p><strong>示例 1：</strong></p><pre><code>输入：00000000000000000000000000001011输出：3解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 &#39;1&#39;。</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：00000000000000000000000010000000输出：1解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 &#39;1&#39;。</code></pre><p><strong>示例 3：</strong></p><pre><code>输入：11111111111111111111111111111101输出：31解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 &#39;1&#39;。</code></pre><p><strong>提示：</strong></p><ul><li>输入必须是长度为 <code>32</code> 的 <strong>二进制串</strong> 。</li></ul><p><strong>进阶</strong>：</p><ul><li>如果多次调用这个函数，你将如何优化你的算法？</li></ul><p>通过次数188,460</p><p>提交次数251,807</p><p><strong>性能分析</strong></p><p>时间复杂度：$O(n)$​​​​</p><p>空间复杂度：$O(1)$</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span>uint32_t n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">>></span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            val<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/22/%E4%BD%8D1%E7%9A%84%E4%B8%AA%E6%95%B0/image-20210922084527845.png" alt="image-20210922084527845"></p>]]></content>
    
    
    <summary type="html">位1的个数</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://tony2ty.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://tony2ty.github.io/categories/leetcode/"/>
    
    
    <category term="数组" scheme="https://tony2ty.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>至少是其他数字两倍的最大数</title>
    <link href="https://tony2ty.github.io/2021/09/19/%E8%87%B3%E5%B0%91%E6%98%AF%E5%85%B6%E4%BB%96%E6%95%B0%E5%AD%97%E4%B8%A4%E5%80%8D%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0/"/>
    <id>https://tony2ty.github.io/2021/09/19/%E8%87%B3%E5%B0%91%E6%98%AF%E5%85%B6%E4%BB%96%E6%95%B0%E5%AD%97%E4%B8%A4%E5%80%8D%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0/</id>
    <published>2021-09-19T12:52:07.000Z</published>
    <updated>2021-09-19T12:54:59.832Z</updated>
    
    <content type="html"><![CDATA[<h4 id="747-至少是其他数字两倍的最大数"><a href="#747-至少是其他数字两倍的最大数" class="headerlink" title="747. 至少是其他数字两倍的最大数"></a><a href="https://leetcode-cn.com/problems/largest-number-at-least-twice-of-others/">747. 至少是其他数字两倍的最大数</a></h4><p>难度：简单</p><hr><p>给你一个整数数组 <code>nums</code> ，其中总是存在 <strong>唯一的</strong> 一个最大整数 。</p><p>请你找出数组中的最大元素并检查它是否 <strong>至少是数组中每个其他数字的两倍</strong> 。如果是，则返回 <strong>最大元素的下标</strong> ，否则返回 <code>-1</code> 。</p><p><strong>示例 1：</strong></p><pre><code>输入：nums = [3,6,1,0]输出：1解释：6 是最大的整数，对于数组中的其他整数，6 大于数组中其他元素的两倍。6 的下标是 1 ，所以返回 1 。</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：nums = [1,2,3,4]输出：-1解释：4 没有超过 3 的两倍大，所以返回 -1 。</code></pre><p><strong>示例 3：</strong></p><pre><code>输入：nums = [1]输出：0解释：因为不存在其他数字，所以认为现有数字 1 至少是其他数字的两倍。</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 50</code></li><li><code>0 &lt;= nums[i] &lt;= 100</code></li><li><code>nums</code> 中的最大元素是唯一的</li></ul><p>通过次数45,043</p><p>提交次数108,352</p><p><strong>性能分析</strong></p><p>时间复杂度：$O(n)$​​​​</p><p>空间复杂度：$O(1)$</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">dominantIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> max<span class="token punctuation">,</span> min<span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numsSize <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    max <span class="token operator">=</span> min <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            min <span class="token operator">=</span> max<span class="token punctuation">;</span>            max <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> min<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            min <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">>=</span> min<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/19/%E8%87%B3%E5%B0%91%E6%98%AF%E5%85%B6%E4%BB%96%E6%95%B0%E5%AD%97%E4%B8%A4%E5%80%8D%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0/image-20210919205412698.png" alt="image-20210919205412698"></p>]]></content>
    
    
    <summary type="html">至少是其他数字两倍的最大数</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://tony2ty.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://tony2ty.github.io/categories/leetcode/"/>
    
    
    <category term="数组" scheme="https://tony2ty.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>最小时间差</title>
    <link href="https://tony2ty.github.io/2021/09/18/%E6%9C%80%E5%B0%8F%E6%97%B6%E9%97%B4%E5%B7%AE/"/>
    <id>https://tony2ty.github.io/2021/09/18/%E6%9C%80%E5%B0%8F%E6%97%B6%E9%97%B4%E5%B7%AE/</id>
    <published>2021-09-18T09:11:39.000Z</published>
    <updated>2021-09-18T09:19:47.323Z</updated>
    
    <content type="html"><![CDATA[<h4 id="539-最小时间差"><a href="#539-最小时间差" class="headerlink" title="539. 最小时间差"></a><a href="https://leetcode-cn.com/problems/minimum-time-difference/">539. 最小时间差</a></h4><p>难度：中等</p><hr><p>给定一个 24 小时制（小时:分钟 **”HH:MM”**）的时间列表，找出列表中任意两个时间的最小时间差并以分钟数表示。</p><p><strong>示例 1：</strong></p><pre><code>输入：timePoints = [&quot;23:59&quot;,&quot;00:00&quot;]输出：1</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：timePoints = [&quot;00:00&quot;,&quot;23:59&quot;,&quot;00:00&quot;]输出：0</code></pre><p><strong>提示：</strong></p><ul><li><code>2 &lt;= timePoints &lt;= 2 * 104</code></li><li><code>timePoints[i]</code> 格式为 <strong>“HH:MM”</strong></li></ul><p>通过次数13,788</p><p>提交次数23,121</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">findMinDifference</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> timePoints<span class="token punctuation">,</span> <span class="token keyword">int</span> timePointsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> array<span class="token punctuation">[</span>timePointsSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hour<span class="token punctuation">,</span> minute<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> timePointsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">sscanf</span><span class="token punctuation">(</span>timePoints<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"%d:%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>hour<span class="token punctuation">,</span> <span class="token operator">&amp;</span>minute<span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> hour <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span> minute<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> timePointsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmpfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> timePointsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">></span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> array<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            min <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> array<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> diff <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1440</span> <span class="token operator">-</span> array<span class="token punctuation">[</span>timePointsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        min <span class="token operator">=</span> diff<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> min<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/18/%E6%9C%80%E5%B0%8F%E6%97%B6%E9%97%B4%E5%B7%AE/%E6%8D%95%E8%8E%B7.PNG" alt="捕获"></p>]]></content>
    
    
    <summary type="html">最小时间差</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://tony2ty.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://tony2ty.github.io/categories/leetcode/"/>
    
    
    <category term="数组" scheme="https://tony2ty.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>STM32F429PWM输出</title>
    <link href="https://tony2ty.github.io/2021/09/17/STM32F429PWM%E8%BE%93%E5%87%BA/"/>
    <id>https://tony2ty.github.io/2021/09/17/STM32F429PWM%E8%BE%93%E5%87%BA/</id>
    <published>2021-09-17T00:31:17.000Z</published>
    <updated>2021-09-17T00:42:53.729Z</updated>
    
    <content type="html"><![CDATA[<p><strong>硬件</strong></p><p>NUCLEO-F429ZI开发板</p><p><strong>软件</strong></p><p>KEIL</p><p>LL库</p><p><strong>STM32CubeMX配置</strong></p><p><img src="/2021/09/17/STM32F429PWM%E8%BE%93%E5%87%BA/image-20210917083411379.png" alt="image-20210917083411379"></p><p><strong>代码</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">MX_TIM1_Init</span><span class="token punctuation">(</span>uint32_t period<span class="token punctuation">,</span> uint32_t pulse<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LL_TIM_GetAutoReload</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>period <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>         <span class="token operator">&amp;&amp;</span> <span class="token function">LL_TIM_OC_GetCompareCH1</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>pulse <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* USER CODE BEGIN TIM1_Init 0 */</span>    uint32_t uhPrescalerValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        uhPrescalerValue <span class="token operator">=</span> <span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span><span class="token punctuation">(</span>SystemCoreClock <span class="token operator">/</span> <span class="token number">1200</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 60000 - 1 ¼´1.2K</span><span class="token comment" spellcheck="true">//    LL_TIM_DeInit(TIM1);</span>  <span class="token comment" spellcheck="true">/* USER CODE END TIM1_Init 0 */</span>  LL_TIM_InitTypeDef TIM_InitStruct <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  LL_GPIO_InitTypeDef GPIO_InitStruct <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Peripheral clock enable */</span>  <span class="token function">LL_APB2_GRP1_EnableClock</span><span class="token punctuation">(</span>LL_APB2_GRP1_PERIPH_TIM1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* USER CODE BEGIN TIM1_Init 1 */</span>  <span class="token comment" spellcheck="true">/* USER CODE END TIM1_Init 1 */</span>  TIM_InitStruct<span class="token punctuation">.</span>Prescaler <span class="token operator">=</span> uhPrescalerValue<span class="token punctuation">;</span>  TIM_InitStruct<span class="token punctuation">.</span>CounterMode <span class="token operator">=</span> LL_TIM_COUNTERMODE_UP<span class="token punctuation">;</span>  TIM_InitStruct<span class="token punctuation">.</span>Autoreload <span class="token operator">=</span> <span class="token punctuation">(</span>period <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>period <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  TIM_InitStruct<span class="token punctuation">.</span>ClockDivision <span class="token operator">=</span> LL_TIM_CLOCKDIVISION_DIV1<span class="token punctuation">;</span>  TIM_InitStruct<span class="token punctuation">.</span>RepetitionCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">LL_TIM_Init</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LL_TIM_DisableARRPreload</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LL_TIM_OC_EnablePreload</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> LL_TIM_CHANNEL_CH1<span class="token punctuation">)</span><span class="token punctuation">;</span>  TIM_OC_InitStruct<span class="token punctuation">.</span>OCMode <span class="token operator">=</span> LL_TIM_OCMODE_PWM1<span class="token punctuation">;</span>  TIM_OC_InitStruct<span class="token punctuation">.</span>OCState <span class="token operator">=</span> LL_TIM_OCSTATE_DISABLE<span class="token punctuation">;</span>  TIM_OC_InitStruct<span class="token punctuation">.</span>OCNState <span class="token operator">=</span> LL_TIM_OCSTATE_DISABLE<span class="token punctuation">;</span>  TIM_OC_InitStruct<span class="token punctuation">.</span>CompareValue <span class="token operator">=</span> <span class="token punctuation">(</span>pulse <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>pulse <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  TIM_OC_InitStruct<span class="token punctuation">.</span>OCPolarity <span class="token operator">=</span> LL_TIM_OCPOLARITY_HIGH<span class="token punctuation">;</span>  TIM_OC_InitStruct<span class="token punctuation">.</span>OCNPolarity <span class="token operator">=</span> LL_TIM_OCPOLARITY_HIGH<span class="token punctuation">;</span>  TIM_OC_InitStruct<span class="token punctuation">.</span>OCIdleState <span class="token operator">=</span> LL_TIM_OCIDLESTATE_LOW<span class="token punctuation">;</span>  TIM_OC_InitStruct<span class="token punctuation">.</span>OCNIdleState <span class="token operator">=</span> LL_TIM_OCIDLESTATE_LOW<span class="token punctuation">;</span>  <span class="token function">LL_TIM_OC_Init</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> LL_TIM_CHANNEL_CH1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_OC_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LL_TIM_OC_DisableFast</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> LL_TIM_CHANNEL_CH1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LL_TIM_SetTriggerOutput</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> LL_TIM_TRGO_RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LL_TIM_DisableMasterSlaveMode</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">)</span><span class="token punctuation">;</span>  TIM_BDTRInitStruct<span class="token punctuation">.</span>OSSRState <span class="token operator">=</span> LL_TIM_OSSR_DISABLE<span class="token punctuation">;</span>  TIM_BDTRInitStruct<span class="token punctuation">.</span>OSSIState <span class="token operator">=</span> LL_TIM_OSSI_DISABLE<span class="token punctuation">;</span>  TIM_BDTRInitStruct<span class="token punctuation">.</span>LockLevel <span class="token operator">=</span> LL_TIM_LOCKLEVEL_OFF<span class="token punctuation">;</span>  TIM_BDTRInitStruct<span class="token punctuation">.</span>DeadTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  TIM_BDTRInitStruct<span class="token punctuation">.</span>BreakState <span class="token operator">=</span> LL_TIM_BREAK_DISABLE<span class="token punctuation">;</span>  TIM_BDTRInitStruct<span class="token punctuation">.</span>BreakPolarity <span class="token operator">=</span> LL_TIM_BREAK_POLARITY_HIGH<span class="token punctuation">;</span>  TIM_BDTRInitStruct<span class="token punctuation">.</span>AutomaticOutput <span class="token operator">=</span> LL_TIM_AUTOMATICOUTPUT_DISABLE<span class="token punctuation">;</span>  <span class="token function">LL_TIM_BDTR_Init</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_BDTRInitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* USER CODE BEGIN TIM1_Init 2 */</span>  <span class="token comment" spellcheck="true">/* USER CODE END TIM1_Init 2 */</span>  <span class="token function">LL_AHB1_GRP1_EnableClock</span><span class="token punctuation">(</span>LL_AHB1_GRP1_PERIPH_GPIOE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**TIM1 GPIO Configuration    PE9     ------> TIM1_CH1    */</span>  GPIO_InitStruct<span class="token punctuation">.</span>Pin <span class="token operator">=</span> LL_GPIO_PIN_9<span class="token punctuation">;</span>  GPIO_InitStruct<span class="token punctuation">.</span>Mode <span class="token operator">=</span> LL_GPIO_MODE_ALTERNATE<span class="token punctuation">;</span>  GPIO_InitStruct<span class="token punctuation">.</span>Speed <span class="token operator">=</span> LL_GPIO_SPEED_FREQ_LOW<span class="token punctuation">;</span>  GPIO_InitStruct<span class="token punctuation">.</span>OutputType <span class="token operator">=</span> LL_GPIO_OUTPUT_PUSHPULL<span class="token punctuation">;</span>  GPIO_InitStruct<span class="token punctuation">.</span>Pull <span class="token operator">=</span> LL_GPIO_PULL_NO<span class="token punctuation">;</span>  GPIO_InitStruct<span class="token punctuation">.</span>Alternate <span class="token operator">=</span> LL_GPIO_AF_1<span class="token punctuation">;</span>  <span class="token function">LL_GPIO_Init</span><span class="token punctuation">(</span>GPIOE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**************************/</span>  <span class="token comment" spellcheck="true">/* TIM2 interrupts set-up */</span>  <span class="token comment" spellcheck="true">/**************************/</span>  <span class="token comment" spellcheck="true">/* Enable the capture/compare interrupt for channel 1*/</span><span class="token comment" spellcheck="true">//  LL_TIM_EnableIT_CC1(TIM1);</span>  <span class="token function">LL_TIM_EnableAllOutputs</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**********************************/</span>  <span class="token comment" spellcheck="true">/* Start output signal generation */</span>  <span class="token comment" spellcheck="true">/**********************************/</span>  <span class="token comment" spellcheck="true">/* Enable output channel 1 */</span>  <span class="token function">LL_TIM_CC_EnableChannel</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> LL_TIM_CHANNEL_CH1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Enable counter */</span>  <span class="token function">LL_TIM_EnableCounter</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Force update generation */</span>  <span class="token function">LL_TIM_GenerateEvent_UPDATE</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>问题</strong></p><ol><li><p>PWM输出占空比100%异常的问题</p><p>将ton与period周期值设置相同后，通过逻辑分析仪测试发现占空比无法达到100%。查看手册可知需要将ton（CCRx）大于period（ARR）周期值才能输出占空比100%。</p></li></ol><p><img src="/2021/09/17/STM32F429PWM%E8%BE%93%E5%87%BA/image-20210917083955508.png" alt="image-20210917083955508"></p><ol start="2"><li><p>PWM输出的最大频率问题</p><p>PWM输出的最大频率即为TIMER所在总线频率/定时器的分频系数。如果TIMER是16位，频率基本没法超过1Hz。此时应该考虑使用32位TIMER。</p></li></ol>]]></content>
    
    
    <summary type="html">STM32F429PWM输出</summary>
    
    
    
    <category term="嵌入式" scheme="https://tony2ty.github.io/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="STM32" scheme="https://tony2ty.github.io/categories/STM32/"/>
    
    
    <category term="TIMER" scheme="https://tony2ty.github.io/tags/TIMER/"/>
    
    <category term="PWM" scheme="https://tony2ty.github.io/tags/PWM/"/>
    
  </entry>
  
  <entry>
    <title>剑指OfferII068.查找插入位置</title>
    <link href="https://tony2ty.github.io/2021/09/17/%E5%89%91%E6%8C%87OfferII068-%E6%9F%A5%E6%89%BE%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
    <id>https://tony2ty.github.io/2021/09/17/%E5%89%91%E6%8C%87OfferII068-%E6%9F%A5%E6%89%BE%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</id>
    <published>2021-09-17T00:09:27.000Z</published>
    <updated>2021-09-17T00:11:06.054Z</updated>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-II-068-查找插入位置"><a href="#剑指-Offer-II-068-查找插入位置" class="headerlink" title="剑指 Offer II 068. 查找插入位置"></a><a href="https://leetcode-cn.com/problems/N6YdxV/">剑指 Offer II 068. 查找插入位置</a></h4><p>难度：简单</p><hr><p>给定一个排序的整数数组 <code>nums</code> 和一个整数目标值<code> target</code> ，请在数组中找到 <code>target </code>，并返回其下标。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 <code>O(log n)</code> 的算法。</p><p><strong>示例 1:</strong></p><pre><code>输入: nums = [1,3,5,6], target = 5输出: 2</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: nums = [1,3,5,6], target = 2输出: 1</code></pre><p><strong>示例 3:</strong></p><pre><code>输入: nums = [1,3,5,6], target = 7输出: 4</code></pre><p><strong>示例 4:</strong></p><pre><code>输入: nums = [1,3,5,6], target = 0输出: 0</code></pre><p><strong>示例 5:</strong></p><pre><code>输入: nums = [1], target = 0输出: 0</code></pre><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 为<strong>无重复元素</strong>的<strong>升序</strong>排列数组</li><li><code>-104 &lt;= target &lt;= 104</code></li></ul><p>注意：本题与主站 35 题相同： <a href="https://leetcode-cn.com/problems/search-insert-position/">https://leetcode-cn.com/problems/search-insert-position/</a></p><p>通过次数1,826</p><p>提交次数3,538</p><p><strong>性能分析</strong></p><p>时间复杂度：$O(n)$​​​​</p><p>空间复杂度：$O(1)$</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">searchInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">></span> nums<span class="token punctuation">[</span>numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> numsSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ret <span class="token operator">=</span>  i<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ret <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">剑指OfferII068.查找插入位置</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://tony2ty.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://tony2ty.github.io/categories/leetcode/"/>
    
    
    <category term="数组" scheme="https://tony2ty.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指OfferII069.山峰数组的顶部</title>
    <link href="https://tony2ty.github.io/2021/09/16/%E5%89%91%E6%8C%87OfferII069-%E5%B1%B1%E5%B3%B0%E6%95%B0%E7%BB%84%E7%9A%84%E9%A1%B6%E9%83%A8/"/>
    <id>https://tony2ty.github.io/2021/09/16/%E5%89%91%E6%8C%87OfferII069-%E5%B1%B1%E5%B3%B0%E6%95%B0%E7%BB%84%E7%9A%84%E9%A1%B6%E9%83%A8/</id>
    <published>2021-09-16T00:26:40.000Z</published>
    <updated>2021-09-16T00:29:33.243Z</updated>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-II-069-山峰数组的顶部"><a href="#剑指-Offer-II-069-山峰数组的顶部" class="headerlink" title="剑指 Offer II 069. 山峰数组的顶部"></a><a href="https://leetcode-cn.com/problems/B1IidL/">剑指 Offer II 069. 山峰数组的顶部</a></h4><p>难度：简单</p><hr><p>符合下列属性的数组 <code>arr</code> 称为 <strong>山峰数组</strong>（<strong>山脉数组）</strong> ：</p><ul><li><p><code>arr.length &gt;= 3</code></p></li><li><p>存在</p><pre><code>i</code></pre><p>（</p><pre><code>0 &lt; i &lt; arr.length - 1</code></pre><p>）使得：</p><ul><li><code>arr[0] &lt; arr[1] &lt; ... arr[i-1] &lt; arr[i]</code></li><li><code>arr[i] &gt; arr[i+1] &gt; ... &gt; arr[arr.length - 1]</code></li></ul></li></ul><p>给定由整数组成的山峰数组 <code>arr</code> ，返回任何满足 <code>arr[0] &lt; arr[1] &lt; ... arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code> 的下标 <code>i</code> ，即山峰顶部。</p><p><strong>示例 1：</strong></p><pre><code>输入：arr = [0,1,0]输出：1</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：arr = [1,3,5,4,2]输出：2</code></pre><p><strong>示例 3：</strong></p><pre><code>输入：arr = [0,10,5,2]输出：1</code></pre><p><strong>示例 4：</strong></p><pre><code>输入：arr = [3,4,5,1]输出：2</code></pre><p><strong>示例 5：</strong></p><pre><code>输入：arr = [24,69,100,99,79,78,67,36,26,19]输出：2</code></pre><p><strong>提示：</strong></p><ul><li><code>3 &lt;= arr.length &lt;= 104</code></li><li><code>0 &lt;= arr[i] &lt;= 106</code></li><li>题目数据保证 <code>arr</code> 是一个山脉数组</li></ul><p><strong>进阶：</strong>很容易想到时间复杂度 <code>O(n)</code> 的解决方案，你可以设计一个 <code>O(log(n))</code> 的解决方案吗？</p><p>注意：本题与主站 852 题相同：<a href="https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/">https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/</a></p><p>通过次数1,754</p><p>提交次数2,410</p><p><strong>性能分析</strong></p><p>时间复杂度：$O(logn)$​​​​</p><p>空间复杂度：$O(1)$</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">peakIndexInMountainArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> arrSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> high <span class="token operator">=</span> arrSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// printf("%d %d %d\r\n", mid, low, high);</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            index <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                high <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                low <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> index<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/16/%E5%89%91%E6%8C%87OfferII069-%E5%B1%B1%E5%B3%B0%E6%95%B0%E7%BB%84%E7%9A%84%E9%A1%B6%E9%83%A8/image-20210916082741026.png" alt="image-20210916082741026"></p>]]></content>
    
    
    <summary type="html">剑指OfferII069.山峰数组的顶部</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://tony2ty.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://tony2ty.github.io/categories/leetcode/"/>
    
    
    <category term="数组" scheme="https://tony2ty.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="二分查找法" scheme="https://tony2ty.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>最大升序子数组和</title>
    <link href="https://tony2ty.github.io/2021/09/15/%E6%9C%80%E5%A4%A7%E5%8D%87%E5%BA%8F%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
    <id>https://tony2ty.github.io/2021/09/15/%E6%9C%80%E5%A4%A7%E5%8D%87%E5%BA%8F%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</id>
    <published>2021-09-15T15:54:02.000Z</published>
    <updated>2021-09-16T00:29:54.456Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1800-最大升序子数组和"><a href="#1800-最大升序子数组和" class="headerlink" title="1800. 最大升序子数组和"></a><a href="https://leetcode-cn.com/problems/maximum-ascending-subarray-sum/">1800. 最大升序子数组和</a></h4><p>难度：简单</p><hr><p>给你一个正整数组成的数组 <code>nums</code> ，返回 <code>nums</code> 中一个 <strong>升序</strong> 子数组的最大可能元素和。</p><p>子数组是数组中的一个连续数字序列。</p><p>已知子数组 <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，若对所有 <code>i</code>（<code>l &lt;= i &lt; r</code>），<code>numsi &lt; numsi+1</code> 都成立，则称这一子数组为 <strong>升序</strong> 子数组。注意，大小为 <code>1</code> 的子数组也视作 <strong>升序</strong> 子数组。</p><p><strong>示例 1：</strong></p><pre><code>输入：nums = [10,20,30,5,10,50]输出：65解释：[5,10,50] 是元素和最大的升序子数组，最大元素和为 65 。</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：nums = [10,20,30,40,50]输出：150解释：[10,20,30,40,50] 是元素和最大的升序子数组，最大元素和为 150 。 </code></pre><p><strong>示例 3：</strong></p><pre><code>输入：nums = [12,17,15,13,10,11,12]输出：33解释：[10,11,12] 是元素和最大的升序子数组，最大元素和为 33 。 </code></pre><p><strong>示例 4：</strong></p><pre><code>输入：nums = [100,10,1]输出：100</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>1 &lt;= nums[i] &lt;= 100</code></li></ul><p>通过次数9,510</p><p>提交次数13,903</p><p><strong>性能分析</strong></p><p>时间复杂度：$O(n)$​​​​</p><p>空间复杂度：$O(1)$</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">maxAscendingSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> val <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            val <span class="token operator">+</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">></span> max<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                max <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            val <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;</span> val<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        max <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/15/%E6%9C%80%E5%A4%A7%E5%8D%87%E5%BA%8F%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/image-20210915235454446.png" alt="image-20210915235454446"></p>]]></content>
    
    
    <summary type="html">最大升序子数组和</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://tony2ty.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://tony2ty.github.io/categories/leetcode/"/>
    
    
    <category term="数组" scheme="https://tony2ty.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>162.寻找峰值</title>
    <link href="https://tony2ty.github.io/2021/09/14/162-%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/"/>
    <id>https://tony2ty.github.io/2021/09/14/162-%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/</id>
    <published>2021-09-14T01:16:41.000Z</published>
    <updated>2021-09-14T01:18:48.028Z</updated>
    
    <content type="html"><![CDATA[<h4 id="162-寻找峰值"><a href="#162-寻找峰值" class="headerlink" title="162. 寻找峰值"></a><a href="https://leetcode-cn.com/problems/find-peak-element/">162. 寻找峰值</a></h4><p>难度中等513收藏分享切换为英文接收动态反馈</p><p>峰值元素是指其值严格大于左右相邻值的元素。</p><p>给你一个整数数组 <code>nums</code>，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 <strong>任何一个峰值</strong> 所在位置即可。</p><p>你可以假设 <code>nums[-1] = nums[n] = -∞</code> 。</p><p>你必须实现时间复杂度为 <code>O(log n)</code> 的算法来解决此问题。</p><p><strong>示例 1：</strong></p><pre><code>输入：nums = [1,2,3,1]输出：2解释：3 是峰值元素，你的函数应该返回其索引 2。</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：nums = [1,2,1,3,5,6,4]输出：1 或 5 解释：你的函数可以返回索引 1，其峰值元素为 2；     或者返回索引 5， 其峰值元素为 6。</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li><li>对于所有有效的 <code>i</code> 都有 <code>nums[i] != nums[i + 1]</code></li></ul><p>通过次数124,797</p><p>提交次数252,164</p><p><strong>性能分析</strong></p><p>时间复杂度：$O(n)$​​​​</p><p>空间复杂度：$O(1)$</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">findPeakElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numsSize <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numsSize <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// printf("%d\n", mid);</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> numsSize<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            high <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            low <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> mid<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/14/162-%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/image-20210914091752049.png" alt="image-20210914091752049"></p>]]></content>
    
    
    <summary type="html">162.寻找峰值</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://tony2ty.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://tony2ty.github.io/categories/leetcode/"/>
    
    
    <category term="数组" scheme="https://tony2ty.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="二分查找法" scheme="https://tony2ty.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>寻找旋转排序数组中的最小值II</title>
    <link href="https://tony2ty.github.io/2021/09/13/%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BCII/"/>
    <id>https://tony2ty.github.io/2021/09/13/%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BCII/</id>
    <published>2021-09-13T00:17:33.000Z</published>
    <updated>2021-09-13T00:19:21.738Z</updated>
    
    <content type="html"><![CDATA[<h4 id="154-寻找旋转排序数组中的最小值-II"><a href="#154-寻找旋转排序数组中的最小值-II" class="headerlink" title="154. 寻找旋转排序数组中的最小值 II"></a><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/">154. 寻找旋转排序数组中的最小值 II</a></h4><p>难度：困难</p><hr><p>已知一个长度为 <code>n</code> 的数组，预先按照升序排列，经由 <code>1</code> 到 <code>n</code> 次 <strong>旋转</strong> 后，得到输入数组。例如，原数组 <code>nums = [0,1,4,4,5,6,7]</code> 在变化后可能得到：</p><ul><li>若旋转 <code>4</code> 次，则可以得到 <code>[4,5,6,7,0,1,4]</code></li><li>若旋转 <code>7</code> 次，则可以得到 <code>[0,1,4,4,5,6,7]</code></li></ul><p>注意，数组 <code>[a[0], a[1], a[2], ..., a[n-1]]</code> <strong>旋转一次</strong> 的结果为数组 <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code> 。</p><p>给你一个可能存在 <strong>重复</strong> 元素值的数组 <code>nums</code> ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 <strong>最小元素</strong> 。</p><p><strong>示例 1：</strong></p><pre><code>输入：nums = [1,3,5]输出：1</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：nums = [2,2,2,0,1]输出：0</code></pre><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 5000</code></li><li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li><li><code>nums</code> 原来是一个升序排序的数组，并进行了 <code>1</code> 至 <code>n</code> 次旋转</li></ul><p><strong>进阶：</strong></p><ul><li>这道题是 <a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/description/">寻找旋转排序数组中的最小值</a> 的延伸题目。</li><li>允许重复会影响算法的时间复杂度吗？会如何影响，为什么？</li></ul><p>通过次数111,363</p><p>提交次数209,361</p><p><strong>性能分析</strong></p><p>时间复杂度：$O(n)$​​​​</p><p>空间复杂度：$O(1)$</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            min <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> min<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/13/%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BCII/image-20210913081830494.png" alt="image-20210913081830494"></p>]]></content>
    
    
    <summary type="html">寻找旋转排序数组中的最小值II</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://tony2ty.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://tony2ty.github.io/categories/leetcode/"/>
    
    
    <category term="数组" scheme="https://tony2ty.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>寻找旋转排序数组中的最小值</title>
    <link href="https://tony2ty.github.io/2021/09/12/%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/"/>
    <id>https://tony2ty.github.io/2021/09/12/%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/</id>
    <published>2021-09-12T10:50:06.000Z</published>
    <updated>2021-09-12T10:52:28.637Z</updated>
    
    <content type="html"><![CDATA[<h4 id="153-寻找旋转排序数组中的最小值"><a href="#153-寻找旋转排序数组中的最小值" class="headerlink" title="153. 寻找旋转排序数组中的最小值"></a><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/">153. 寻找旋转排序数组中的最小值</a></h4><p>难度：中等</p><hr><p>已知一个长度为 <code>n</code> 的数组，预先按照升序排列，经由 <code>1</code> 到 <code>n</code> 次 <strong>旋转</strong> 后，得到输入数组。例如，原数组 <code>nums = [0,1,2,4,5,6,7]</code> 在变化后可能得到：</p><ul><li>若旋转 <code>4</code> 次，则可以得到 <code>[4,5,6,7,0,1,2]</code></li><li>若旋转 <code>7</code> 次，则可以得到 <code>[0,1,2,4,5,6,7]</code></li></ul><p>注意，数组 <code>[a[0], a[1], a[2], ..., a[n-1]]</code> <strong>旋转一次</strong> 的结果为数组 <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code> 。</p><p>给你一个元素值 <strong>互不相同</strong> 的数组 <code>nums</code> ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 <strong>最小元素</strong> 。</p><p><strong>示例 1：</strong></p><pre><code>输入：nums = [3,4,5,1,2]输出：1解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：nums = [4,5,6,7,0,1,2]输出：0解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。</code></pre><p><strong>示例 3：</strong></p><pre><code>输入：nums = [11,13,15,17]输出：11解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。</code></pre><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 5000</code></li><li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li><li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li><li><code>nums</code> 原来是一个升序排序的数组，并进行了 <code>1</code> 至 <code>n</code> 次旋转</li></ul><p>通过次数206,363</p><p>提交次数364,472</p><p><strong>性能分析</strong></p><p>时间复杂度：$O(n)$​​​​</p><p>空间复杂度：$O(1)$</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            min <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> min<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/12/%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/image-20210912185139847.png" alt="image-20210912185139847"></p>]]></content>
    
    
    <summary type="html">寻找旋转排序数组中的最小值</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://tony2ty.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://tony2ty.github.io/categories/leetcode/"/>
    
    
    <category term="数组" scheme="https://tony2ty.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>子数组最大平均数I</title>
    <link href="https://tony2ty.github.io/2021/09/11/%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E6%95%B0I/"/>
    <id>https://tony2ty.github.io/2021/09/11/%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E6%95%B0I/</id>
    <published>2021-09-11T00:17:22.000Z</published>
    <updated>2021-09-11T00:19:39.919Z</updated>
    
    <content type="html"><![CDATA[<h4 id="643-子数组最大平均数-I"><a href="#643-子数组最大平均数-I" class="headerlink" title="643. 子数组最大平均数 I"></a><a href="https://leetcode-cn.com/problems/maximum-average-subarray-i/">643. 子数组最大平均数 I</a></h4><p>难度：简单</p><hr><p>给你一个由 <code>n</code> 个元素组成的整数数组 <code>nums</code> 和一个整数 <code>k</code> 。</p><p>请你找出平均数最大且 <strong>长度为 <code>k</code></strong> 的连续子数组，并输出该最大平均数。</p><p>任何误差小于 <code>10-5</code> 的答案都将被视为正确答案。</p><p><strong>示例 1：</strong></p><pre><code>输入：nums = [1,12,-5,-6,50,3], k = 4输出：12.75解释：最大平均数 (12-5-6+50)/4 = 51/4 = 12.75</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：nums = [5], k = 1输出：5.00000</code></pre><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= k &lt;= n &lt;= 105</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li></ul><p>通过次数62,310</p><p>提交次数137,971</p><p><strong>性能分析</strong></p><p>时间复杂度：$O(n)$​​​​</p><p>空间复杂度：$O(1)$</p><pre class=" language-c"><code class="language-c"><span class="token keyword">double</span> <span class="token function">findMaxAverage</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">,</span> max<span class="token punctuation">;</span>    val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        val <span class="token operator">+</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    max <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        val <span class="token operator">-</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">;</span>        val <span class="token operator">+</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// printf("%d %d %d %d\n", val, max, nums[i - k], nums[i]);</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;</span> val<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            max <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>max <span class="token operator">/</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/11/%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E6%95%B0I/image-20210911081839132.png" alt="image-20210911081839132"></p>]]></content>
    
    
    <summary type="html">子数组最大平均数I</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://tony2ty.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://tony2ty.github.io/categories/leetcode/"/>
    
    
    <category term="数组" scheme="https://tony2ty.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>最小差值I</title>
    <link href="https://tony2ty.github.io/2021/09/10/%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BCI/"/>
    <id>https://tony2ty.github.io/2021/09/10/%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BCI/</id>
    <published>2021-09-10T13:13:43.000Z</published>
    <updated>2021-09-10T13:16:03.905Z</updated>
    
    <content type="html"><![CDATA[<h4 id="908-最小差值-I"><a href="#908-最小差值-I" class="headerlink" title="908. 最小差值 I"></a><a href="https://leetcode-cn.com/problems/smallest-range-i/">908. 最小差值 I</a></h4><p>难度：简单</p><hr><p>给你一个整数数组 <code>nums</code>，请你给数组中的每个元素 <code>nums[i]</code> 都加上一个任意数字 <code>x</code> （<code>-k &lt;= x &lt;= k</code>），从而得到一个新数组 <code>result</code> 。</p><p>返回数组 <code>result</code> 的最大值和最小值之间可能存在的最小差值。</p><p><strong>示例 1：</strong></p><pre><code>输入：nums = [1], k = 0输出：0解释：result = [1]</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：nums = [0,10], k = 2输出：6解释：result = [2,8]</code></pre><p><strong>示例 3：</strong></p><pre><code>输入：nums = [1,3,6], k = 3输出：0解释：result = [3,3,3] or result = [4,4,4]</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10000</code></li><li><code>0 &lt;= nums[i] &lt;= 10000</code></li><li><code>0 &lt;= k &lt;= 10000</code></li></ul><p>通过次数20,355</p><p>提交次数29,134</p><p><strong>性能分析</strong></p><p>时间复杂度：$O(n)$​​​​</p><p>空间复杂度：$O(1)$</p><pre class=" language-C"><code class="language-C">int smallestRangeI(int* nums, int numsSize, int k){    int max, min;     max = min = nums[0];    for (int i = 0; i < numsSize; i++)    {        if (nums[i] > max)        {            max = nums[i];        }        else if (nums[i] < min)        {            min = nums[i];        }    }    if ((max - min) < 2 * k)    {        return 0;    }    else    {        return max - min - 2 * k;    }}</code></pre><p><img src="/2021/09/10/%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BCI/%E6%8D%95%E8%8E%B7.PNG" alt="捕获"></p>]]></content>
    
    
    <summary type="html">最小差值I</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://tony2ty.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://tony2ty.github.io/categories/leetcode/"/>
    
    
    <category term="数组" scheme="https://tony2ty.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>删除有序数组中的重复项II</title>
    <link href="https://tony2ty.github.io/2021/09/09/%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9II/"/>
    <id>https://tony2ty.github.io/2021/09/09/%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9II/</id>
    <published>2021-09-09T02:57:49.000Z</published>
    <updated>2021-09-09T03:07:56.633Z</updated>
    
    <content type="html"><![CDATA[<h4 id="80-删除有序数组中的重复项-II"><a href="#80-删除有序数组中的重复项-II" class="headerlink" title="80. 删除有序数组中的重复项 II"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/">80. 删除有序数组中的重复项 II</a></h4><p>难度：中等</p><hr><p>给你一个有序数组 <code>nums</code> ，请你**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 删除重复出现的元素，使每个元素 <strong>最多出现两次</strong> ，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p><p><strong>说明：</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢？</p><p>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><pre><code>// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝int len = removeDuplicates(nums);// 在函数里修改输入数组对于调用者是可见的。// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。for (int i = 0; i &lt; len; i++) &#123;    print(nums[i]);&#125;</code></pre><p><strong>示例 1：</strong></p><pre><code>输入：nums = [1,1,1,2,2,3]输出：5, nums = [1,1,2,2,3]解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。 不需要考虑数组中超出新长度后面的元素。</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：nums = [0,0,1,1,1,1,2,3,3]输出：7, nums = [0,0,1,1,2,3,3]解释：函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。 不需要考虑数组中超出新长度后面的元素。</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 已按升序排列</li></ul><p>通过次数145,544</p><p>提交次数236,114</p><p><strong>性能分析</strong></p><p>时间复杂度：$O(n)？$​​​​</p><p>空间复杂度：$O(1)$</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>    <span class="token keyword">int</span> val <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//注意这里的结束条件不能是numsSize，数组长度在动态变化</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tmp<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// printf("a %d %d %d\n", tmp, val, i); </span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> tmp <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">,</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                cnt <span class="token operator">-</span><span class="token operator">=</span> tmp <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>                i <span class="token operator">=</span> i <span class="token operator">-</span> tmp <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>                     val <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                val <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// printf("b %d %d %d\n", tmp, val, i); </span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// printf("c %d %d %d\n", tmp, val, i); </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// printf("%d\n", tmp);</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cnt <span class="token operator">-</span><span class="token operator">=</span> tmp <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/09/%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9II/image-20210909105850875.png" alt="image-20210909105850875"></p>]]></content>
    
    
    <summary type="html">删除有序数组中的重复项II</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://tony2ty.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://tony2ty.github.io/categories/leetcode/"/>
    
    
    <category term="数组" scheme="https://tony2ty.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer53-I.在排序数组中查找数字I</title>
    <link href="https://tony2ty.github.io/2021/09/08/%E5%89%91%E6%8C%87Offer53-I-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97I/"/>
    <id>https://tony2ty.github.io/2021/09/08/%E5%89%91%E6%8C%87Offer53-I-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97I/</id>
    <published>2021-09-08T00:47:21.000Z</published>
    <updated>2021-09-08T00:48:49.441Z</updated>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-53-I-在排序数组中查找数字-I"><a href="#剑指-Offer-53-I-在排序数组中查找数字-I" class="headerlink" title="剑指 Offer 53 - I. 在排序数组中查找数字 I"></a><a href="https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/">剑指 Offer 53 - I. 在排序数组中查找数字 I</a></h4><p>难度：简单</p><hr><p>统计一个数字在排序数组中出现的次数。</p><p><strong>示例 1:</strong></p><pre><code>输入: nums = [5,7,7,8,8,10], target = 8输出: 2</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: nums = [5,7,7,8,8,10], target = 6输出: 0</code></pre><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 105</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>nums</code> 是一个非递减数组</li><li><code>-109 &lt;= target &lt;= 109</code></li></ul><p><strong>注意：</strong>本题与主站 34 题相同（仅返回值不同）：<a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/</a></p><p>通过次数179,015</p><p>提交次数332,211</p><p><strong>性能分析</strong></p><p>时间复杂度：$O(n)$​​​​</p><p>空间复杂度：$O(1)$</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/08/%E5%89%91%E6%8C%87Offer53-I-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97I/image-20210908084849378.png" alt="image-20210908084849378"></p>]]></content>
    
    
    <summary type="html">剑指Offer53-I.在排序数组中查找数字I</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://tony2ty.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://tony2ty.github.io/categories/leetcode/"/>
    
    
    <category term="数组" scheme="https://tony2ty.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>三个数的最大乘积</title>
    <link href="https://tony2ty.github.io/2021/09/07/%E4%B8%89%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/"/>
    <id>https://tony2ty.github.io/2021/09/07/%E4%B8%89%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/</id>
    <published>2021-09-07T06:15:47.000Z</published>
    <updated>2021-09-07T06:28:54.006Z</updated>
    
    <content type="html"><![CDATA[<h4 id="628-三个数的最大乘积"><a href="#628-三个数的最大乘积" class="headerlink" title="628. 三个数的最大乘积"></a><a href="https://leetcode-cn.com/problems/maximum-product-of-three-numbers/">628. 三个数的最大乘积</a></h4><p>难度：简单</p><hr><p>给你一个整型数组 <code>nums</code> ，在数组中找出由三个数组成的最大乘积，并输出这个乘积。</p><p><strong>示例 1：</strong></p><pre><code>输入：nums = [1,2,3]输出：6</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：nums = [1,2,3,4]输出：24</code></pre><p><strong>示例 3：</strong></p><pre><code>输入：nums = [-1,-2,-3]输出：-6</code></pre><p><strong>提示：</strong></p><ul><li><code>3 &lt;= nums.length &lt;= 104</code></li><li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li></ul><p>通过次数78,488</p><p>提交次数149,433</p><p><strong>性能分析</strong></p><p>时间复杂度：$O(n)$​​​​</p><p>空间复杂度：$O(1)$</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">maximumProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmpfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> val1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>val2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        val1 <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    val1 <span class="token operator">*</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    val2 <span class="token operator">=</span> nums<span class="token punctuation">[</span>numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>numsSize <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>numsSize <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>val1 <span class="token operator">></span> val2<span class="token punctuation">)</span><span class="token operator">?</span> val1 <span class="token punctuation">:</span> val2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/07/%E4%B8%89%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/%E6%8D%95%E8%8E%B7-16309955119001.PNG" alt="捕获"></p>]]></content>
    
    
    <summary type="html">三个数的最大乘积</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://tony2ty.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://tony2ty.github.io/categories/leetcode/"/>
    
    
    <category term="数组" scheme="https://tony2ty.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>存在连续三个奇数的数组</title>
    <link href="https://tony2ty.github.io/2021/09/06/%E5%AD%98%E5%9C%A8%E8%BF%9E%E7%BB%AD%E4%B8%89%E4%B8%AA%E5%A5%87%E6%95%B0%E7%9A%84%E6%95%B0%E7%BB%84/"/>
    <id>https://tony2ty.github.io/2021/09/06/%E5%AD%98%E5%9C%A8%E8%BF%9E%E7%BB%AD%E4%B8%89%E4%B8%AA%E5%A5%87%E6%95%B0%E7%9A%84%E6%95%B0%E7%BB%84/</id>
    <published>2021-09-06T01:19:10.000Z</published>
    <updated>2021-09-06T01:22:39.086Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1550-存在连续三个奇数的数组"><a href="#1550-存在连续三个奇数的数组" class="headerlink" title="1550. 存在连续三个奇数的数组"></a><a href="https://leetcode-cn.com/problems/three-consecutive-odds/">1550. 存在连续三个奇数的数组</a></h4><p>难度：简单</p><hr><p>给你一个整数数组 <code>arr</code>，请你判断数组中是否存在连续三个元素都是奇数的情况：如果存在，请返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><pre><code>输入：arr = [2,6,4,1]输出：false解释：不存在连续三个元素都是奇数的情况。</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：arr = [1,2,34,3,4,5,7,23,12]输出：true解释：存在连续三个元素都是奇数的情况，即 [5,7,23] 。</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= arr.length &lt;= 1000</code></li><li><code>1 &lt;= arr[i] &lt;= 1000</code></li></ul><p>通过次数20,766</p><p>提交次数31,444</p><p><strong>性能分析</strong></p><p>时间复杂度：$O(n)$​​​​</p><p>空间复杂度：$O(1)$</p><pre class=" language-c"><code class="language-c">bool <span class="token function">threeConsecutiveOdds</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> arrSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> true<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/06/%E5%AD%98%E5%9C%A8%E8%BF%9E%E7%BB%AD%E4%B8%89%E4%B8%AA%E5%A5%87%E6%95%B0%E7%9A%84%E6%95%B0%E7%BB%84/image-20210906092024453.png" alt="image-20210906092024453"></p><p>代码优化</p><pre class=" language-c"><code class="language-c">bool <span class="token function">threeConsecutiveOdds</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> arrSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> true<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/06/%E5%AD%98%E5%9C%A8%E8%BF%9E%E7%BB%AD%E4%B8%89%E4%B8%AA%E5%A5%87%E6%95%B0%E7%9A%84%E6%95%B0%E7%BB%84/image-20210906092207430.png" alt="image-20210906092207430"></p>]]></content>
    
    
    <summary type="html">存在连续三个奇数的数组</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://tony2ty.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://tony2ty.github.io/categories/leetcode/"/>
    
    
    <category term="数组" scheme="https://tony2ty.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
</feed>
